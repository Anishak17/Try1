# wget -O try1.txt "https://raw.githubusercontent.com/Anishak17/Try1/main/try1.txt" - runs only in cmd line
#!git clone https://github.com/Anishak17/Try1 - cmd

import urllib
urllib.request.urlretrieve("https://tinyurl.com/tcsw1", "try1.txt") #"https://raw.githubusercontent.com/Anishak17/Try1/main/try1.txt"

#https://raw.githubusercontent.com/Anishak17/Try1/main/T3/T3_innovator%20-%20Copy.ipynb
#https://raw.githubusercontent.com/Anishak17/Try1/main/T3/try1.ipynb
#https://raw.githubusercontent.com/Anishak17/Try1/main/T3/Question%20(4).ipynb
#https://raw.githubusercontent.com/Anishak17/Try1/main/W1/Question%20(4).ipynb #2,3,4

from IPython.display import display, HTML, Image
Image('expected_plots/plot1.png')

display(HTML('<embed src="https://matplotlib.org/" width="100%" height="300">'))
#"https://matplotlib.org/stable/api"
display(HTML('<embed src="https://seaborn.pydata.org" width="1000" height="300">'))
display(HTML('<embed src="https://seaborn.pydata.org/api.html" height="200" width= "1100">'))
display(HTML('<embed src="https://numpy.org/doc/stable/" height="200" width= "1100">'))
display(HTML('<embed src="https://matplotlib.org/stable/api/pyplot_summary.html" height="200" width= "1100" style="filter: grayscale(100%);">'))
display(HTML('<embed src="https://www.google.com/webhp?igu=1" height="200" width= "1100" style="opacity: 0.3;">'))
display(HTML('<iframe src="https://www.google.com/webhp?igu=1"> height="100" </iframe>'))
%%HTML
<embed src="https://www.google.com/webhp?igu=1" width="100%" height="300">

fig1, ax1 = plt.subplots(1,1,figsize=(15,5))
sns.lineplot(df,x='campaign',y='day',hue='month', hue_order = ['may','apr','jun'],marker="o",ax=ax1)
# ax1.set(title='Number of Campaigns Based on Months',xlabel='Campaign',ylabel='Day')
ax1.set_title('Number of Campaigns Based on Months',{'fontsize': 15, 'fontweight': 'bold'}) #ax1.title.set_fontsize(15),ax1.title.set_fontweight('bold')
ax1.set_xlabel('Campaign',fontdict={'fontsize': 12}) #ax1.xaxis.label.set_fontsize(12)
ax1.set_ylabel('Day',fontdict={'fontsize': 12})
ax1.grid()
fig1.savefig('plot1.png',bbox_inches='tight')

sns.heatmap(corr1,annot=True,ax=ax2)
sns.scatterplot(data=df, x= 'campaign',y='duration',hue='month',hue_order=['jan','feb','mar','apr','may'],ax=ax4)

# grouped bar chart
df2 = (df.groupby(['job', 'housing']).size().unstack().rename(columns={'no': 'h_no', 'yes': 'h_yes'}))
df2[['l_no', 'l_yes']] = (df.groupby(['job', 'loan']).size().unstack().rename(columns={'no': 'l_no', 'yes': 'l_yes'}))
df2['total'] = df2.sum(axis=1)
fig, ax = plt.subplots(figsize=(10, 5))
df2.sort_values('total', ascending=False)[['h_yes', 'h_no', 'l_yes', 'l_no']].plot.bar(ax=ax)
ax.set_xlabel('Job type', fontsize=12)
ax.set_ylabel('Count', fontsize=12)
ax.set_title('Job and Loan', fontweight='bold', fontsize=15)
plt.savefig('plot3.png', bbox_inches='tight')
plt.show()

#linear model plot
sns.lmplot(data=df, x='balance',y='age',hue='y')

#histogram
fig6, ax6 = plt.subplots(1,1, figsize=(10,5))
df6 = df[df.job.isin(['blue-collar','retired','technician','admin.','management'])].groupby('job')['duration']
cols = ['blue-collar','retired','technician','admin.','management']
for var in cols:
  df6.get_group(var).hist(ax=ax6,grid=False,bins=50,alpha=0.5)
  #sns.histplot(df6.get_group(var),bins=50,ax=ax6,alpha=0.5,element="step",linewidth=0)
ax6.legend(cols)
ax6.set_title('Last Contact Duration - Job Wise',fontdict={'fontsize':15,'fontweight':'bold'})
ax6.set_xlabel('Duration',fontdict={'fontsize':12})

df6 = df[df.job.isin(cols)]
fig, ax = plt.subplots(figsize=(10, 5))
sns.histplot(data=df6, x='duration',stat='count', hue='job', bins=50, element="step", multiple="layer", linewidth=0, alpha=0.5, ax=ax)

import seaborn as sns

# Create a sample DataFrame
df_6 = pd.DataFrame({
    'Category': ['A', 'A', 'B', 'B', 'C', 'C'],
    'Value': [1, 2, 3, 4, 5, 6]
})

# Plot multiple histograms with different 'multiple' parameter values
fig, axs = plt.subplots(2, 2, figsize=(10, 8))
sns.histplot(data=df_6, x='Value', hue='Category', multiple='layer', ax=axs[0, 0])
axs[0, 0].set_title("Multiple: 'layer'")
sns.histplot(data=df_6, x='Value', hue='Category', multiple='stack', ax=axs[0, 1])
axs[0, 1].set_title("Multiple: 'stack'")
sns.histplot(data=df_6, x='Value', hue='Category', multiple='fill', ax=axs[1, 0])
axs[1, 0].set_title("Multiple: 'fill'")
sns.histplot(data=df_6, x='Value', hue='Category', multiple='dodge', ax=axs[1, 1])
axs[1, 1].set_title("Multiple: 'dodge'")
plt.tight_layout()
plt.show()

cols = ['balance', 'day', 'duration', 'campaign', 'pdays', 'previous']
fig7, ax7 = plt.subplots(2, 3, figsize=(20, 15))
plt.suptitle('Numerical Data Distributions', fontsize=20, fontweight='bold')
for ax, var in zip(ax7.flatten(), cols):
    df[var].hist(ax=ax, grid=False)
    ax.set_title(var)

cols8 = df.select_dtypes(exclude="number")
fig8, ax8 = plt.subplots(3, 3, figsize=(20, 15))
plt.suptitle('Normalized Relative Frequency', fontsize=20, fontweight='bold')
for ax, col in zip(ax8.flatten(), cols8.columns[:-1]):
    df8 = df.groupby([col, 'y']).size().unstack()
    df8['rf'] = (df8['yes'] / df8['yes'].sum()) - (df8['no'] / df8['no'].sum())
    sns.barplot(data=df8[['rf']].T, orient='h', ax=ax)
    ax.set_title(col)
    ax.set_ylabel('')
    
dir(ax6)
help(matplotlib.axes.Axes.plot)
help(df.hist)
help(plt.Text)
help(plt.title), help(plt.suptitle)
help(plt.figure)

import cv2 as cv
img = cv.imread('/content/drive/MyDrive/wingst3-nov21n1-datavisualization/expected_plots/plot7.png')
plt.imshow(img)
import shutil, os
shutil.copy("/content/drive/MyDrive/wingst3-nov21n1-datavisualization/expected_plots/plot1.png",'/content/')

import inspect
help(inspect)
inspect.getfullargspec(evaluate)
inspect.getsourcelines(evaluate)
inspect.getsourcelines(evaluate.evaluation)
